Sub EnleverTrigger(ws As Worksheet)
    ' Sélectionne la plage à partir de C4 jusqu'à la dernière cellule non vide vers le bas et vers la droite
    ' Supprime le format de remplissage des cellules sélectionnées
    Range("C4").Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With

    ' Répète la même opération pour la plage à partir de H4
    Range("H4").Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    With Selection.Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub

Sub VerifierTrigger()
    ' Cette procédure vérifie les valeurs dans une plage et applique une mise en forme conditionnelle en fonction des seuils définis

    ' Variables pour suivre les dernières lignes et colonnes utilisées
    Dim derLT, derLD, i, j, k, derC As Integer
    ' Variables pour stocker les informations de conditions
    Dim champ, cond1, cond2, condition As String
    Dim signecond1, signecond2 As String
    Dim nbrcond1, nbrcond2 As Integer

    ' Récupère la dernière ligne non vide dans la feuille des seuils et dans la feuille active
    derLT = Sheets("4Thresholds").Cells(Rows.Count, 3).End(xlUp).Row
    derLD = ActiveSheet.Cells(Rows.Count, 4).End(xlUp).Row
    derC = ActiveSheet.Cells(3, Columns.Count).End(xlToLeft).Column

    ' Appelle la procédure pour supprimer les formats actuels
    Call EnleverTrigger(Sheets("1Current"))

    ' Boucle sur chaque ligne des seuils pour vérifier les conditions
    For i = 4 To derLT
        champ = Sheets("4Thresholds").Cells(i, 3).Value
        cond1 = Sheets("4Thresholds").Cells(i, 4).Value
        cond2 = Sheets("4Thresholds").Cells(i, 5).Value
        signecond1 = Left(cond1, 1)
        signecond2 = Left(cond2, 1)
        nbrcond1 = Left(Split(cond1, " ")(1), Len(Split(cond1, " ")(1)) - 1)
        If cond2 <> "" Then
            nbrcond2 = Left(Split(cond2, " ")(1), Len(Split(cond2, " ")(1)) - 1)
        Else
            nbrcond2 = Empty
        End If

        ' Boucle à travers les colonnes de la feuille active pour appliquer les conditions
        For j = 4 To derC
            If champ = ActiveSheet.Cells(3, j).Value Then
                For k = 4 To derLD
                    If ActiveSheet.Cells(k, j).Value <> "-" Then
                        ' Applique les conditions et met en forme les cellules qui répondent aux critères
                        If signecond1 = "<" Then
                            If CDbl(ActiveSheet.Cells(k, j).Value) < nbrcond1 = True Then
                                ActiveSheet.Cells(k, j).Interior.ColorIndex = 22
                            End If
                        ElseIf signecond1 = ">" Then
                            If CDbl(ActiveSheet.Cells(k, j).Value) > nbrcond1 = True Then
                                ActiveSheet.Cells(k, j).Interior.ColorIndex = 22
                            End If
                        End If
                    End If
                Next
                ' Si une deuxième condition est définie, elle est également appliquée
                If cond2 <> "" Then
                    For k = 4 To derLD
                        If ActiveSheet.Cells(k, j).Value <> "-" Then
                            If signecond2 = "<" Then
                                If CDbl(ActiveSheet.Cells(k, j).Value) < nbrcond2 = True Then
                                    ActiveSheet.Cells(k, j).Interior.ColorIndex = 22
                                End If
                            ElseIf signecond2 = ">" Then
                                If CDbl(ActiveSheet.Cells(k, j).Value) > nbrcond2 = True Then
                                    ActiveSheet.Cells(k, j).Interior.ColorIndex = 22
                                End If
                            End If
                        End If
                    Next
                End If
            End If
        Next
    Next
End Sub

Sub CompterTrigger()
    ' Cette procédure compte et liste les déclencheurs activés dans la feuille "1Current"

    ' Déclarations des variables
    Dim derLD, derCD, derLR, derCR, derLS, i, j, k, l As Integer
    Dim derniereUpdate As String
    Dim nb_trigger As Integer
    Dim liste_trigger As String

    ' Récupère la dernière ligne des feuilles
    derLD = Sheets("1Current").Cells(Rows.Count, 5).End(xlUp).Row
    derCD = Sheets("1Current").Cells(3, Columns.Count).End(xlToLeft).Column
    derLS = Sheets("0Source").Cells(Rows.Count, 5).End(xlUp).Row
    derniereLR = Sheets("3Summary").Cells(Rows.Count, 3).End(xlUp).Row

    ' Efface les anciennes données dans "3Summary"
    Sheets("3Summary").Cells.Clear

    ' Met à jour l'horodatage de la feuille de résumé
    derniereUpdate = Format(Now(), "dd.mm.yyyy h:mm AM/PM")
    Sheets("3Summary").Range("A1").Font.Color = RGB(255, 255, 255)
    With Sheets("3Summary").Range("A1")
        .Value = "Last update on : " & derniereUpdate
        .Interior.Color = RGB(112, 48, 160)
        .BorderAround _
            ColorIndex:=1, Weight:=xlMedium
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Font.Size = 11
    End With

    ' Définit les en-têtes du tableau de résumé
    Sheets("3Summary").Range("C3").Value = "Company Name"
    Sheets("3Summary").Range("C3").Interior.Color = RGB(112, 48, 160)
    Sheets("3Summary").Range("C3").Font.Color = RGB(255, 255, 255)
    Sheets("3Summary").Range("C3").HorizontalAlignment = xlCenter
    Sheets("3Summary").Range("C3").Font.Bold = True

    ' Boucle sur chaque ligne pour compter le nombre de déclencheurs activés
    For j = 4 To derLD
        nb_trigger = 0
        liste_trigger = ""
        For k = 5 To derCD
            If Sheets("1Current").Cells(j, k).Interior.ColorIndex = 22 Then
                nb_trigger = nb_trigger + 1
                liste_trigger = liste_trigger & Sheets("1Current").Cells(3, k).Value & " ; "
            End If
        Next
        ' Remplir les informations dans la feuille de résumé
        Sheets("3Summary").Cells(j, 3).Value = Sheets("1Current").Cells(j, 4).Value
        Sheets("3Summary").Cells(j, 4).Value = nb_trigger
        Sheets("3Summary").Cells(j, 5).Value = liste_trigger
        Sheets("3Summary").Cells(j, 6).Value = Sheets("1Current").Cells(j, 5).Value
        Sheets("3Summary").Cells(j, 7).Value = Sheets("0Source").Cells(j, 6).Value
    Next

    ' Appelle la fonction pour trier le tableau
    Call TriTableauTriggers

    ' Ajoute des bordures autour des cellules
    Sheets("3Summary").Range("C3:G3").VerticalAlignment = xlVAlignCenter
    For l = 4 To derniereLR Step 2
        Sheets("3Summary").Range("C" & l & ":G" & l).Interior.Color = RGB(217, 217, 217)
    Next l
End Sub

Sub TriTableauTriggers()
    ' Trie les données dans la feuille "3Summary" en fonction du nombre de déclencheurs négatifs
    Dim ws As Worksheet
    Dim lMaxRows As Integer
    Set ws = ActiveWorkbook.Worksheets("3Summary")
    
    lMaxRows = Sheets("3Summary").Cells(Rows.Count, 3).End(xlUp).Row

    ' Trie selon les valeurs dans la colonne des déclencheurs
    With ws.Sort.SortFields
        .Clear
        .Add Key:=ws.Range("D3:D" & lMaxRows), SortOn:=xlSortOnValues, _
             Order:=xlDescending, DataOption:=xlSortNormal
    End With

    ' Applique le tri sur la plage de données
    With ws.Sort
        .SetRange ws.Range("C3:Q" & lMaxRows)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
End Sub

Sub Parametrage()
    ' Cette procédure configure les paramètres et remplit certaines cellules avec des valeurs jointes

    Dim rng As Range
    Dim dlm As String
    Dim result As String
    Dim derniereL As Integer
    Dim derniereL_DV As Integer

    ' Récupère les dernières lignes dans les feuilles "0Source" et "0DataValidation"
    derniereL = Sheets("0Source").Cells(Rows.Count, 4).End(xlUp).Row
    derniereL_DV = Sheets("0DataValidation").Cells(Rows.Count, 4).End(xlUp).Row

    ' Efface les anciennes données
    Sheets("0DataValidation").Cells.ClearContents

    ' Définit certaines valeurs dans la feuille de validation de données
    With Sheets("0DataValidation")
        .Range("A3").Value = "Lookup"
        .Range("N3").Value = "Fitch ID 2"
        .Range("O3").Value = "Lookup"
        .Range("P3").Value = "Primary"
        .Range("AD3").Value = "Lookup"
    End With

    ' Définir la plage de cellules et le délimiteur
    Set rng = ThisWorkbook.Sheets("0Source").Range("D4:D" & derniereL)
    dlm = ","
    result = TextJoinRange(dlm, rng)

    ' Remplit les paramètres dans la feuille "0Settings"
    Sheets("0Settings").Cells(4, 3).Value = "fitchId:" & result
    Sheets("0Settings").Cells(5, 3).Value = "periodType:Annual"
    Sheets("0Settings").Cells(6, 3).Value = "entity.id:" & result
    Sheets("0Settings").Cells(7, 3).Value = "primary:TRUE"
End Sub

Sub Boucle()
    ' Boucle à travers les lignes pour remplir une cellule spécifique en fonction d'une condition

    Dim derniereL As Integer
    Dim j As Integer
    
    derniereL = Sheets("0Source").Cells(Rows.Count, 4).End(xlUp).Row

    For j = 4 To derniereL
        ' Si la condition dans la colonne 26 est vraie, concatène plusieurs colonnes et remplit la colonne 30
        If Sheets("0DataValidation").Cells(j, 26) = "true" Then
            Sheets("0DataValidation").Cells(j, 30) = Sheets("0DataValidation").Cells(j, 20) & _
                                                      Sheets("0DataValidation").Cells(j, 23) & _
                                                      Sheets("0DataValidation").Cells(j, 24)
        Else
            Sheets("0DataValidation").Cells(j, 30) = " "
        End If
    Next
End Sub

Sub Boucle_b()
    ' Remplit certaines cellules en fonction d'une correspondance trouvée dans une autre colonne

    Dim derniereL_DVd As Integer
    Dim k As Integer
    Dim searchValue As String
    Dim matchRow As Variant
    Dim result As Variant
    
    derniereL_DVd = Sheets("0DataValidation").Cells(Rows.Count, 4).End(xlUp).Row

    ' Boucle à travers les lignes pour effectuer des correspondances
    For k = 4 To derniereL_DVd
        Sheets("0DataValidation").Cells(k, 14) = Sheets("0DataValidation").Cells(k, 3)
        Sheets("0DataValidation").Cells(k, 15) = Sheets("0DataValidation").Cells(k, 3) & _
                                                 Sheets("0DataValidation").Cells(k, 7) & _
                                                 Sheets("0DataValidation").Cells(k, 8)
        searchValue = Sheets("0DataValidation").Cells(k, "O").Value
        
        ' Recherche une correspondance dans la colonne AD et récupère la valeur correspondante
        On Error Resume Next
        matchRow = Application.Match(searchValue, Sheets("0DataValidation").Range("AD:AD"), 0)
        On Error GoTo 0
        
        If Not IsError(matchRow) Then
            result = Sheets("0DataValidation").Cells(matchRow, "Z").Value
            Sheets("0DataValidation").Cells(k, "P").Value = result
        Else
            Sheets("0DataValidation").Cells(k, "P").Value = "Not found"
        End If
        
        ' Si une correspondance est trouvée, concatène certaines cellules
        If Sheets("0DataValidation").Cells(k, "P").Value <> "Not found" Then
            Sheets("0DataValidation").Cells(k, "A").Value = Sheets("0DataValidation").Cells(k, "C").Value & _
                                                           Sheets("0DataValidation").Cells(k, "P").Value
        End If
    Next
End Sub

Function TextJoinRange(delimiter As String, rng As Range) As String
    ' Fonction pour concaténer les valeurs d'une plage de cellules avec un délimiteur donné

    Dim cell As Range
    Dim joinedText As String
    
    joinedText = "" ' Initialiser la chaîne jointe

    ' Boucle sur chaque cellule de la plage
    For Each cell In rng
        joinedText = joinedText & cell.Value
        ' Ajouter le délimiteur après chaque valeur sauf la dernière
        If Not cell.Address = rng.Cells(rng.Cells.Count).Address Then
            joinedText = joinedText & delimiter
        End If
    Next cell
    
    ' Retourner le texte concaténé
    TextJoinRange = joinedText
End Function

Sub CopierCollerValeurs(ws As Worksheet)
    ' Cette procédure copie les valeurs d'une feuille et les colle dans la même plage

    Application.OnTime Now() + TimeValue("00:00:03"), "ThisWorkbook.CopierCollerValeurs", , True
    ActiveWorkbook.RefreshAll
    
    ' Si la cellule E4 n'est pas vide, elle colle les valeurs
    If IsEmpty(ws.Range("E4")) = False Then
        Application.OnTime Now() + TimeValue("00:00:03"), "ThisWorkbook.CopierCollerValeurs", , False
        ws.Cells.Select
        Selection.Copy
        Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    End If
End Sub

Sub Etape1()
    ' Initialisation et préparation des données dans plusieurs feuilles avant traitement
    
    Dim derniereL As Integer
    Dim derniereL_S As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim searchValue As String
    Dim matchRow As Variant
    Dim result As Variant
    Dim derniereUpdate As String
    Dim nb_champ As Integer

    derniereUpdate = Format(Now(), "dd.mm.yyyy h:mm AM/PM") ' Met à jour l'heure
    derniereL = Sheets("0Source").Cells(Rows.Count, 4).End(xlUp).Row ' Dernière ligne de la feuille "0Source"
    derniereL_S = Sheets("0Source").Cells(Rows.Count, 10).End(xlUp).Row
    nb_champ = derniereL_S - 3
    
    ' Initialisation des cellules de la feuille "1Current"
    With Sheets("1Current").Range("A1")
        .Value = "Last update on : " & derniereUpdate
        .Interior.Color = RGB(112, 48, 160)
        .BorderAround ColorIndex:=1, Weight:=xlMedium
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Font.Size = 9
    End With
    
    ' Copie des données vers la feuille de passage
    Sheets("1Current").Copy Before:=Sheets("2Previous")
    ActiveSheet.Name = "1.5Passage"
    Call SupprimerBoutons(Sheets("1.5Passage"))
    Call SupprimerBoutons(Sheets("2Previous"))
    Call EnleverTableau(Sheets("1.5Passage"))
    Call CreerTableau(Sheets("1.5Passage"))
    Call SupprimerData(Sheets("1Current"))
    Call EnleverTableau(Sheets("1Current"))

    ' Boucle à travers les lignes pour copier les valeurs de "0Source" vers "1Current"
    For k = 4 To derniereL_S
        Sheets("1Current").Cells(2, k + 4).Value = Sheets("0Source").Cells(k, 10).Value
        Sheets("1Current").Cells(3, k + 4).Value = Sheets("0Source").Cells(k, 9).Value
    Next

    ' Recherche des correspondances dans "0DataValidation"
    For i = 4 To derniereL
        Sheets("1Current").Cells(i, 3).Value = Sheets("0Source").Cells(i, 4).Value
        Sheets("1Current").Cells(i, 4).Value = Sheets("0Source").Cells(i, 5).Value
        searchValue = Sheets("1Current").Cells(i, 3).Value & "TRUE"
        On Error Resume Next
        matchRow = Application.Match(searchValue, Sheets("0DataValidation").Range("A:A"), 0)
        On Error GoTo 0
        
        ' Remplir les valeurs si une correspondance est trouvée
        For j = 5 To 7
            If Not IsError(matchRow) Then
                result = Sheets("0DataValidation").Cells(matchRow, j + 1).Value
            Else
                result = "Not found"
            End If
            Sheets("1Current").Cells(i, j).Value = result
        Next j
    Next i

    ' Supprime les triggers et met à jour les données Fitch
    Call EnleverTrigger(Sheets("1Current"))
    Call UpdateFitch(Sheets("1Current"), nb_champ)
End Sub

Sub Etape2()
    ' Prépare les données pour les afficher dans un tableau avec format et bordures

    Dim derniereL, derniereC, i As Integer
    Dim rng As Range
    Dim cell As Range
    Dim cellValue As Double
    Dim colWidths() As Double
    
    derniereL = Sheets("1Current").Cells(Rows.Count, 3).End(xlUp).Row
    derniereC = Sheets("1Current").Cells(3, Columns.Count).End(xlToLeft).Column
    
    ' Redimensionne les colonnes
    ReDim colWidths(3 To derniereC)
    
    For i = 3 To derniereC
        colWidths(i) = Sheets("1Current").Columns(i).ColumnWidth
    Next
    
    Call CopierCollerValeurs(Sheets("1Current"))
    Sheets("1Current").Range(Cells(3, 3), Cells(derniereL, derniereC)).Borders.LineStyle = xlNone
    Call CreerTableau(Sheets("1Current"))

    ' Applique les bordures et ajuste le format des colonnes
    Set rng = Sheets("1Current").Range(Cells(4, 8), Cells(derniereL, derniereC))
    
    ' Met à jour le format des nombres pour les cellules numériques
    For Each cell In rng
        If IsNumeric(cell.Value) Then
            cellValue = cell.Value
            If cellValue = Int(cellValue) Then
                cell.NumberFormat = "#,##0"
            Else
                cell.NumberFormat = "#,##0.00"
            End If
        End If
    Next
    
    ' Réinitialise la largeur des colonnes
    For i = 3 To derniereC
        Sheets("1Current").Columns(i).ColumnWidth = colWidths(i)
    Next
    
    ' Active la feuille et applique le gel des volets
    Sheets("1Current").Activate
    ActiveWindow.FreezePanes = False
    Range("F1").Select
    ActiveWindow.FreezePanes = True
End Sub

Sub Etape3()
    ' Cette procédure compare les données de "Tableau_1Current" et "Tableau_1.5Passage" et affiche les différences

    Dim derniereL As Integer
    Dim derniereC As Integer
    Dim compteur As Integer
    Dim i, j As Integer
    Dim tbl As ListObject
    Dim tbl_2 As ListObject
    Dim derniereUpdate As String
    Dim currentMonth As String
    Dim currentYear As String
    Dim startPos As Integer
    Dim monthAndYear As String
    Dim monthName_old As String
    Dim yearValue_old As String
    Dim text As String

    ' Met à jour l'heure de la dernière mise à jour dans la feuille "1Current"
    derniereUpdate = Format(Now(), "dd.mm.yyyy h:mm AM/PM")
    Sheets("1Current").Range("A1").Value = "Last update on : " & derniereUpdate
    Sheets("1Current").Range("A1").Interior.Color = RGB(112, 48, 160)
    Sheets("1Current").Range("A1").Font.Color = RGB(255, 255, 255)
    Sheets("1Current").Range("A1").Font.Bold = True
    Sheets("1Current").Range("A1").Font.Size = 11

    ' Compare les données dans les deux tableaux et marque les différences en jaune
    Set tbl = Sheets("1Current").ListObjects("Tableau_1Current")
    Set tbl_2 = Sheets("1.5Passage").ListObjects("Tableau_1.5Passage")

    derniereL = tbl.DataBodyRange.Rows.Count
    derniereL_P = tbl_2.DataBodyRange.Rows.Count
    compteur = 0

    ' Comparer les dates de la dernière déclaration entre les tableaux
    For i = 1 To derniereL
        For j = 1 To derniereL_P
            If tbl.DataBodyRange(i, 2) = tbl_2.DataBodyRange(j, 2) Then
                If tbl.DataBodyRange(i, 3) <> tbl_2.DataBodyRange(j, 3) Then
                    tbl.DataBodyRange.Rows(3).Interior.ColorIndex = 6 ' Marque en jaune
                    compteur = compteur + 1
                End If
            End If
        Next j
    Next i

    ' Affiche un message récapitulatif en fonction des différences trouvées
    If currentMonth <> monthName_old And currentMonth = "August" Then
        If compteur > 0 Then
            MsgBox "There were " & compteur & " changes since the last update"
        Else
            MsgBox "There have been no changes since the last update"
        End If
        MsgBox "Most banks have published their latest annual results. Previous data will be archived."
        Call SupprimerBoutons(Sheets("1.5Passage"))
        Call ArchivageOnglet
        Call SupprimerPage(Sheets("2Previous"))
        Sheets("1.5Passage").Name = "2Previous"
        Call VerifierTrigger
    Else
        If compteur > 0 Then
            MsgBox "There were " & compteur & " changes since the last update"
        Else
            MsgBox "There have been no changes since the last update"
        End If
        Call SupprimerPage(Sheets("1.5Passage"))
        Call VerifierTrigger
    End If

    ' Compte et liste les déclencheurs activés
    Call CompterTrigger
End Sub

Function FeuilleExiste(Nom As String) As Boolean
    ' Vérifie si une feuille portant un certain nom existe dans le classeur
    Dim sh As Object

    For Each sh In Sheets
        If UCase(sh.Name) = UCase(Nom) Then
            FeuilleExiste = True
            Exit For
        End If
    Next
End Function

Sub UpdateFitch(ws As Worksheet, nb_champ As Integer)
    ' Met à jour les données de la feuille à partir de la base Fitch en fonction du nombre de champs disponibles
    Dim derniereUpdate As String
    Dim derL As Integer
    Dim lettreColonne_a As String
    Dim lettreColonne_b As String
    Dim lettreColonne_c As String

    ' Conversion des numéros de colonne en lettres
    lettreColonne_a = NumToLtr(nb_champ + 7)
    lettreColonne_b = NumToLtr((nb_champ \ 2) + 7)
    lettreColonne_c = NumToLtr((nb_champ \ 2) + 8)

    ' Dernière ligne utilisée dans la feuille
    derL = ws.Cells(Rows.Count, 3).End(xlUp).Row

    ' Applique les formules Fitch pour récupérer les données à jour
    ws.Range("H4").FormulaArray = _
        "=FC.IfError(FC.ED(""F!"" & C4:C" & derL & ", H2:" & lettreColonne_b & "2, E4:E" & derL & ", F4:F" & derL & ", G4:G" & derL & "), ""-"")"

    ws.Range(lettreColonne_c & "4").FormulaArray = _
        "=FC.IfError(FC.ED(""F!"" & C4:C" & derL & ", " & lettreColonne_c & "2:" & lettreColonne_a & "2, E4:E" & derL & ", F4:F" & derL & ", G4:G" & derL & "), ""-"")"
End Sub

Function TabExiste(ws As Worksheet) As Boolean
    ' Vérifie si un tableau existe dans la feuille
    TabExiste = ws.ListObjects.Count > 0
End Function

Sub EnleverTableau(ws As Worksheet)
    ' Supprime tous les tableaux dans une feuille donnée
    Dim tbl As ListObject
    For Each tbl In ws.ListObjects
        tbl.Unlist
    Next tbl
End Sub

Sub CreerTableau(ws As Worksheet)
    ' Crée un tableau structuré à partir des données dans la feuille spécifiée
    Dim rg As Range
    Dim derniereLigne As Integer, derniereColonne As Integer

    derniereLigne = ws.Cells(Rows.Count, 3).End(xlUp).Row
    derniereColonne = ws.Cells(3, Columns.Count).End(xlToLeft).Column

    ' Définit la plage et crée le tableau
    Set rg = ws.Range(Cells(3, 3), Cells(derniereLigne, derniereColonne))
    ws.ListObjects.Add(xlSrcRange, rg, XlListObjectHasHeaders:=xlYes).Name = "Tableau_" & ws.Name
    ws.ListObjects("Tableau_" & ws.Name).TableStyle = "TableStyleMedium18"
End Sub

Sub SupprimerPage(ws As Worksheet)
    ' Supprime une feuille tout en désactivant les alertes de confirmation
    With Application
        .ScreenUpdating = False
        .DisplayAlerts = False
    End With
    ws.Delete
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

Sub SupprimerData(ws As Worksheet)
    ' Supprime le contenu des données dans tous les tableaux d'une feuille
    Dim tbl As ListObject
    For Each tbl In ws.ListObjects
        tbl.DataBodyRange.Columns(1).Resize(, 50).ClearContents
    Next tbl
End Sub

Sub EnleverSurligneur(ws As Worksheet)
    ' Supprime tout le surlignage des cellules dans la feuille spécifiée
    ws.Cells.Interior.ColorIndex = xlNone
End Sub

Sub SupprimerBoutons(ws As Worksheet)
    ' Supprime tous les boutons de formulaire d'une feuille spécifiée
    Dim shp As Shape
    For Each shp In ws.Shapes
        If shp.Type = msoFormControl Then
            If shp.FormControlType = xlButtonControl Then
                shp.Delete
            End If
        End If
    Next shp
End Sub

Sub RefreshSource()
    ' Met à jour et rafraîchit les données dans la feuille "0Source" et applique un format
    Dim derniereUpdate As String
    Dim derL, derLC, derLD, i, j As Integer

    ' Met à jour la cellule A1 avec la date de dernière mise à jour
    derniereUpdate = Format(Now(), "dd.mm.yyyy h:mm AM/PM")
    With Sheets("0Source").Range("A1")
        .Value = "Last update on : " & derniereUpdate
        .Interior.Color = RGB(112, 48, 160)
        .BorderAround ColorIndex:=1, Weight:=xlMedium
        .Font.Bold = True
        .HorizontalAlignment = xlCenter
        .Font.Size = 9
    End With

    ' Rafraîchit toutes les formules dans "0Source"
    derLC = Sheets("0Source").Cells(Rows.Count, 3).End(xlUp).Row
    derLD = Sheets("0Source").Cells(Rows.Count, 4).End(xlUp).Row
    derL = WorksheetFunction.Max(derLC, derLD)
    Call CopierCollerValeurs(Sheets("0Source"))

    ' Applique des bordures et une alternance de couleur aux lignes
    For i = 3 To derL
        If Sheets("0Source").Range("C" & i).Value = "" Or _
           Sheets("0Source").Range("D" & i).Value = "" Or _
           Sheets("0Source").Range("E" & i).Value = "" Then
            Sheets("0Source").Range("E" & i).Clear
        End If
    Next i

    ' Applique un format alterné pour les lignes de données
    For j = 4 To derL Step 2
        Sheets("0Source").Range("C" & j & ":F" & j).Interior.Color = RGB(217, 217, 217)
    Next j
End Sub

Function NumToLtr(nb_champ)
    ' Convertit un numéro de colonne en lettre pour les formules Excel
    NumToLtr = Split(Cells(1, nb_champ).Address, "$")(1)
End Function

Sub ArchivageOnglet()
    ' Archive des données en copiant plusieurs feuilles dans un nouveau fichier
    Dim sourceWorkbook As Workbook
    Dim destinationWorkbook As Workbook
    Dim sheetToCopy As Worksheet
    Dim destinationPath As String
    Dim destinationFileName As String
    Dim latest_date_old As Date
    Dim copiedSheet As Worksheet
    Dim fileExists As Boolean
    Dim startPos As Integer
    Dim monthAndYear As String
    Dim monthName_old As String
    Dim yearValue_old As Integer ' Modifier pour un entier
    Dim text As String
    Dim sheetName As String

    ' Extrait le mois et l'année de la feuille "1.5Passage"
    text = Sheets("1.5Passage").Range("C1").Value
    startPos = InStr(text, "in :") + Len("in :")
    monthAndYear = Trim(Mid(text, startPos))
    monthName_old = Split(monthAndYear)(0)
    yearValue_old = CInt(Split(monthAndYear)(1))

    ' Définir le nom du fichier d'archive
    yearValue_old = yearValue_old - 1
    destinationPath = "H:\Outils\Archives-Banques-Ratios\"
    destinationFileName = "Archives-Banques-Ratios-" & yearValue_old & ".xlsx"

    ' Ouvre ou crée le fichier d'archive
    If Dir(destinationPath & destinationFileName) <> "" Then
        fileExists = True
    Else
        fileExists = False
    End If

    If fileExists Then
        Set destinationWorkbook = Workbooks.Open(destinationPath & destinationFileName)
    Else
        Set destinationWorkbook = Workbooks.Add
        destinationWorkbook.SaveAs Filename:=destinationPath & destinationFileName
    End If

    ' Copie les feuilles "3Summary", "1.5Passage" et "4Thresholds" vers le fichier d'archive
    Call DeleteSheetIfExists(destinationWorkbook, "Summary")
    Call DeleteSheetIfExists(destinationWorkbook, "Datas")
    Call DeleteSheetIfExists(destinationWorkbook, "Thresholds")
    sourceWorkbook.Sheets("3Summary").Copy Before:=destinationWorkbook.Sheets(1)
    Set copiedSheet = destinationWorkbook.Sheets(1)
    copiedSheet.Name = "Summary"

    sourceWorkbook.Sheets("1.5Passage").Copy After:=destinationWorkbook.Sheets(1)
    Set copiedSheet = destinationWorkbook.Sheets(2)
    copiedSheet.Name = "Datas"

    sourceWorkbook.Sheets("4Thresholds").Copy After:=destinationWorkbook.Sheets(2)
    Set copiedSheet = destinationWorkbook.Sheets(3)
    copiedSheet.Name = "Thresholds"

    Call SupprimerBoutons(destinationWorkbook.Sheets("Summary"))
    Call DeleteSheetIfExists(destinationWorkbook, "Sheet1")

    ' Sauvegarde et ferme le fichier d'archive
    destinationWorkbook.Save
    destinationWorkbook.Close
End Sub

Sub DeleteSheetIfExists(wb As Workbook, sheetName As String)
    ' Supprime une feuille d'un classeur si elle existe
    Dim ws As Worksheet
    On Error Resume Next
    Set ws = wb.Sheets(sheetName)
    On Error GoTo 0
    
    If Not ws Is Nothing Then
        Application.DisplayAlerts = False
        ws.Delete
        Application.DisplayAlerts = True
    End If
End Sub
